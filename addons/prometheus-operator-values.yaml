---
# define custom rule
additionalPrometheusRulesMap:
  custom-rule:
    groups:
      - name: general.rules
        rules:
          - alert: ContainerMemoryUsage
            expr: (sum(container_memory_usage_bytes) BY (pod, namespace) / sum(container_memory_max_usage_bytes) BY (pod, namespace) * 100) > 10
            for: 60s
            labels:
              severity: warning
            annotations:
              summary: "High memory usage for :: {{ $labels.pod }}"
              description: "Pod memory usage is above 10%\n  Pod: {{ $labels.pod }}\n  Namespace: {{ $labels.namespace }}\n  Usage = {{ $value }}\n"

# configure alertmanager
alertmanager:
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/whitelist-source-range: "0.0.0.0/0"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
      nginx.ingress.kubernetes.io/auth-type: basic
      nginx.ingress.kubernetes.io/auth-secret: monitoring-basic-auth
      nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - Alertmanager'
    paths:
      - /alertmanager
  alertmanagerSpec:
    routePrefix : alertmanager/
  # configure notifications
  config:
    global:
      resolve_timeout: 5m
    route:
      group_by: ['job']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'null'
      routes:
        - match:
            alertname: Watchdog
          receiver: 'null'
        - match:
            alertname: ContainerMemoryUsage
          receiver: 'challenge_events'
    receivers:
      - name: 'null'
      - name: 'challenge_events'
        webhook_configs:
          - url: 'https://hazelcast-cloud-challenge.herokuapp.com/challenge_events'
            send_resolved: true

# configure grafana
grafana:
  # test only - not needed
  enabled: False

# configure prometheus
prometheus:
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/whitelist-source-range: "0.0.0.0/0"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
      nginx.ingress.kubernetes.io/auth-type: basic
      nginx.ingress.kubernetes.io/auth-secret: monitoring-basic-auth
      nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - Prometheus'
    paths:
      - /prometheus
  prometheusSpec:
    routePrefix : prometheus/

# not needed
kubeEtcd:
  enabled: False
# not needed
kubeControllerManager:
  enabled: False
# not needed
kubeScheduler:
  enabled: False
